#= 
  Script for plotting the data generated by 7 single galaxy simulations 
  (perform by GADGET3), using the functions of GADGETPlotting.jl.

  The snapshots and related files are located in:
  ../../sim_data/run_00/
  ../../sim_data/run_A_01/
  ../../sim_data/run_C_01/
  ../../sim_data/run_D_01/
  ../../sim_data/run_E_01/
  ../../sim_data/run_F_01/
  ../../sim_data/run_old_model/

  The figures will be store in ../../results/analysis_002/, in one folder 
  per simulation. 
  
  Plots:
  - Different columns are compare between simulations, depending on them being the 
    same physical quantity and their values being at a similar order of magnitude. =#

include("../GADGETPlotting/src/GADGETPlotting.jl")

"Base sim for the directories where the figures and animations will be saved."
const BASE_OUT_PATH = "../../results/analysis_002/"

"Directory containing the simulations."
const BASE_SRC_PATH = "../../sim_data/"

"Directories containing the snapshot files, base names of the files and labels."
const SNAPSHOTS = [
    "run_00/" "snap" "run_00";
    "run_old_model/" "snap" "run_old_model";
    "run_A_01/" "snap" "run_A_01";
    "run_C_01/" "snap" "run_C_01";
    "run_D_01/" "snap" "run_D_01";
    "run_E_01/" "snap" "run_E_01";
    "run_F_01/" "snap" "run_F_01";
]

"Value of ComovingIntegrationOn: 0 -> Newtonian simulation, 1 -> Cosmological simulation."
const SIM_COSMO = 0

snap_paths = SNAPSHOTS[:, 1]
base_names = SNAPSHOTS[:, 2]
labels = SNAPSHOTS[:, 3]

pgfplotsx()

############################################################################################
# Column 2 (probability mass) vs Column 5 (actual mass), for every model.
############################################################################################

sfrTxtPipeline(
    base_names, 
    BASE_SRC_PATH .* snap_paths,
    1,
    [2, 5],
    output_path = BASE_OUT_PATH * "mass_2vs5/",
    sim_cosmo = SIM_COSMO,
    title = labels,
    names = labels,
    bins = 50,
    scale = (:identity, :log10),
)

############################################################################################
# Column 4 (probability SFR) vs Column 6 (actual SFR), for every model.
############################################################################################

sfrTxtPipeline(
    base_names, 
    BASE_SRC_PATH .* snap_paths,
    1,
    [4, 6],
    output_path = BASE_OUT_PATH * "sfr_4vs6/",
    sim_cosmo = SIM_COSMO,
    title = labels,
    names = labels,
    bins = 50,
    scale = (:identity, :log10),
)

############################################################################################
# Column 3 (SFR per particle) vs Column 4 (probability SFR), for the old models.
############################################################################################

sfrTxtPipeline(
    base_names[[1,2]], 
    BASE_SRC_PATH .* snap_paths[[1,2]],
    1,
    [3, 4],
    output_path = BASE_OUT_PATH * "sfr_3vs4/",
    sim_cosmo = SIM_COSMO,
    title = labels[[1,2]],
    names = labels[[1,2]],
    bins = 50,
    scale = (:identity, :log10),
)

############################################################################################
# Column 3 (SFR per particle) vs Column 4 (probability SFR) vs Column 6 (actual SFR), 
# for the old models.
############################################################################################

sfrTxtPipeline(
    base_names[[1,2]], 
    BASE_SRC_PATH .* snap_paths[[1,2]],
    1,
    [3, 4, 6],
    output_path = BASE_OUT_PATH * "sfr_3vs4vs6/",
    sim_cosmo = SIM_COSMO,
    title = labels[[1,2]],
    names = labels[[1,2]],
    bins = 50,
    scale = (:identity, :log10),
)

############################################################################################
# Column 3 (SFR per particle), for the new models.
############################################################################################

sfrTxtPipeline(
    base_names[3:end],
    BASE_SRC_PATH .* snap_paths[3:end],
    1,
    [3],
    output_path = BASE_OUT_PATH * "sfr_3/",
    sim_cosmo = SIM_COSMO,
    title = labels[3:end],
    names = labels[3:end],
    bins = 50,
    scale = (:identity, :log10),
    min_filter = (-Inf, 1e-15),
)

println("Work done!")