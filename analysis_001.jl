#= 
  Script for plotting the data generated by six single galaxy simulations 
  perform by GADGET3. The functions in GADGETPlotting.jl are used.

  The snapshots and related files are located in:
  ../../sim_data/run_00/
  ../../sim_data/run_A_01/
  ../../sim_data/run_C_01/
  ../../sim_data/run_D_01/
  ../../sim_data/run_E_01/
  ../../sim_data/run_old_model/

  The figures, GIF and videos will be store in ../../results/analysis_001/, in one folder 
  per simulation, and within, one folder per type of particle (stars and gas). 
  
  Plots:
  - A density map of the stars projected in the XY plane, for each snapshot of each simulation.
  - Density and metallicity profiles for gas and stars, for each snapshot of each simulation. 
  - SFR vs time compared between simulations in a single figure. 
  
  NOTE: profile plots have the animation capability disable until issue [3199](https://github.com/JuliaPlots/Plots.jl/issues/3199) 
  is resolved =#

include("../GADGETPlotting/GADGETPlotting.jl")

"Base path for the directories where the figures and animations will be saved."
const BASE_OUT_PATH = "../../results/analysis_001/"  

"Directory containing the simulations."           
const SIM_PATH = "../../sim_data/"

"Directory containing the snapshot files."   
const SNAP_PATH = ["run_00/", "run_A_01/", "run_C_01/", "run_D_01/", "run_E_01/", "run_old_model/"]   

"Labels for the different simulations."  
const LABELS = ["run_00" "run_A_01" "run_C_01" "run_D_01" "run_E_01" "run_old_model"]   

"Base name of the snapshot files."
const SNAP_NAME = ["snap", "snap", "snap", "snap", "snap", "snap"]  

"Side dimension of the simulated region, with units, for the case of vacuum boundary conditions."
const BOX_SIZE = 200 * UnitfulAstro.kpc 

"Value of ComovingIntegrationOn: 0 -> Newtonian simulation, 1 -> Cosmological simulation."               
const SIM_COSMO = 0 

"Frame rate for the animations."                   
const FPS = 20                        

########################################################################################
# Star density field projected to the X-Y plane, for each simulation.
########################################################################################

for (i, sim) in enumerate(SNAP_PATH)
    starMapPipeline(SNAP_NAME[i], 
                    SIM_PATH * sim, 
                    BASE_OUT_PATH * sim * "stars/",
                    "density_anim", 
                    FPS,
                    plane="XY",
                    region_factor=0.25,
                    sim_cosmo=SIM_COSMO,
                    region_size=BOX_SIZE)
end

########################################################################################
# Density profile of stars, for each simulation.
########################################################################################
pgfplotsx()

region_factor = [0.2, 0.12, 0.12, 0.12, 0.12, 0.12]

for (i, sim) in enumerate(SNAP_PATH)
    densityProfilePipeline( SNAP_NAME[i], 
                            SIM_PATH * sim, 
                            BASE_OUT_PATH * sim * "stars/", 
                            "density_profile_anim", 
                            4,
                            "stars",
                            bins=80,
                            factor=4,
                            region_factor=region_factor[i],
                            step=10,
                            sim_cosmo=SIM_COSMO,
                            region_size=BOX_SIZE)
end

########################################################################################
# Density profile of gas, for each simulation.
########################################################################################

region_factor = [0.75, 0.3, 0.3, 0.3, 0.3, 0.3]

for (i, sim) in enumerate(SNAP_PATH)
    densityProfilePipeline( SNAP_NAME[i], 
                            SIM_PATH * sim, 
                            BASE_OUT_PATH * sim * "gas/", 
                            "density_profile_anim", 
                            4,
                            "gas",
                            bins=80,
                            factor=4,
                            region_factor=region_factor[i],
                            step=10,
                            sim_cosmo=SIM_COSMO,
                            region_size=BOX_SIZE)
end

########################################################################################
# Metallicity profile of the stars, for each simulation.
########################################################################################

region_factor = [1.0, 0.15, 0.15, 0.15, 0.15, 0.15]

for (i, sim) in enumerate(SNAP_PATH)
    metallicityProfilePipeline( SNAP_NAME[i], 
                                SIM_PATH * sim, 
                                BASE_OUT_PATH * sim * "stars/", 
                                "metallicity_profile_anim", 
                                4,
                                "stars",
                                bins=80,
                                region_factor=region_factor[i],
                                step=10,
                                sim_cosmo=SIM_COSMO,
                                region_size=BOX_SIZE)
end

########################################################################################
# Metallicity profile of the gas, for each simulation.
########################################################################################

region_factor = [3.0, 0.5, 0.5, 0.5, 0.6, 2.0]

for (i, sim) in enumerate(SNAP_PATH)
    metallicityProfilePipeline( SNAP_NAME[i], 
                                SIM_PATH * sim, 
                                BASE_OUT_PATH * sim * "gas/",
                                "metallicity_profile_anim", 
                                4,
                                "gas",
                                bins=80,
                                step=10,
                                sim_cosmo=SIM_COSMO,
                                region_size=BOX_SIZE)
end

########################################################################################
# Comparison between simulation of SFR vs time.
########################################################################################
pgfplotsx()
compareSimulationsPipeline( SNAP_NAME, 
                            SIM_PATH .* SNAP_PATH,
                            BASE_OUT_PATH, 
                            LABELS, 
                            "compare",
                            "clock_time",
                            "sfr",
                            log_scale=true,
                            smooth_data=true,
                            folder="compare_sfr/")